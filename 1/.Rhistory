random = sample( ids );
ORF1 = ??? #change here
ORF2 = ??? #change here
ORF3 = ??? #change here
ORF1 = random[1:m] #change here
ORF2 = random[(m+1) : (2*m)] #change here
ORF3 = random[(2m+1) : (3*m)] #change here
random.triplets = data.frame( cbind(???? ) ); #change here
storage[i] =  calculate.mean.stddev( random.triplets )
}
hist(storage)
for( i in 1:N) {
random = sample( ids );
ORF1 = ??? #change here
ORF2 = ??? #change here
ORF3 = ??? #change here
ORF1 = random[1:m];  #change here
ORF2 = random[(m+1) : (2*m)]; #change here
ORF3 = random[(2m+1) : (3*m)]; #change here
random.triplets = data.frame( cbind(ORF1, ORF2, ORF3 ) ); #change here
storage[i] =  calculate.mean.stddev( random.triplets )
}
hist(storage)
for( i in 1:N) {
random = sample( ids );
ORF1 = ??? #change here
ORF2 = ??? #change here
ORF3 = ??? #change here
ORF1 = random[1:m];  #change here
ORF2 = random[(m+1) : (2*m)]; #change here
ORF3 = random[(2*m+1) : (3*m)]; #change here
random.triplets = data.frame( cbind(ORF1, ORF2, ORF3 ) ); #change here
storage[i] =  calculate.mean.stddev( random.triplets )
}
hist(storage)
install.pacages()
install.packages()
install.packages("Zipf")
install.packages('zipfR')
require(zipfR)
help(pacage=zipfR)
help(package=zipfR)
?rlnre
install.packages("genetics")
install.packages("pegas")
require(adegenet)
data(nancycats)
convert the data and compute frequencies:
S <- summary(as.loci(nancycats)
)
nancycats
nancycats@tab
nancycats
nancycats@all.names
data(nancycats)
convert the data and compute frequencies:
S <- summary(as.loci(nancycats))
compute THETA for all loci:
sapply(S, function(x) theta.k(x$allele))
require(adegenet)
data(nancycats)
convert the data and compute frequencies:
S <- summary(as.loci(nancycats))
compute THETA for all loci:
sapply(S, function(x) theta.k(x$allele))
?as.loci
require(pedas)
require(pegas)
require(adegenet)
data(nancycats)
convert the data and compute frequencies:
S <- summary(as.loci(nancycats))
compute THETA for all loci:
sapply(S, function(x) theta.k(x$allele))
str(S)
S
?theta.h
?tajima.test
tajima.test
example(tajima.test)
x = tajima.test(woodmouse)
x
str(x)
?dist.dna
install.packages("abc")
start <-  strptime("15/6/09 14:00", "%d/%m/%y %H:%M")
start + 100
start <-  strptime("15/6/09 14:00", "%d/%m/%y %H:%M")
x = start + 100
x
start
start <-  strptime("15/6/09 14:00", "%d/%m/%y %H:%M")
end <-  strptime("10/3/12 14:00", "%d/%m/%y %H:%M")
end - start + 1
start <-  strptime("15/6/09 14:00", "%d/%m/%y %H:%M")
end <-  strptime("10/3/09 14:00", "%d/%m/%y %H:%M")
end - start + 1
start <-  strptime("15/6/09 14:00", "%d/%m/%y %H:%M")
end <-  strptime("1/10/09 14:00", "%d/%m/%y %H:%M")
end - start + 1
start <-  strptime("15/6/09 14:00", "%d/%m/%y %H:%M")
end <-  strptime("25/9/09 14:00", "%d/%m/%y %H:%M")
end - start + 1
start <-  strptime("15/6/09 14:00", "%d/%m/%y %H:%M")
end <-  strptime("22/9/09 14:00", "%d/%m/%y %H:%M")
end - start + 1
install.packages("RColorBrewer")
source("http://bioconductor.org/biocLite.R")#
biocLite("flowViz")
install.packages("RColorBrewer")
libary(flowViz)
library(flowViz)
help(pacage=flowViz)
help(package=flowViz)
source("http://bioconductor.org/biocLite.R")
biocLite("flowViz")
rm(list=ls(all=TRUE))
library(flowCore)
file.name <- system.file("extdata","0877408774.B08", package="flowCore")
x <- read.FCS(file.name, transformation=FALSE)
summary(x)
class(x)
keyword(x,c("$P1E", "$P2E", "$P3E", "$P4E"))
stored in format of the form a10^(x/R) where a is
given by the first element of the string
summary(read.FCS(file.name))
summary(read.FCS(file.name,transformation="scale"))
read.FCS(file.name,alter.names=TRUE)
x <- read.FCS(file.name, column.pattern="-H")
x
(lines <- sample(100:500, 50))
y <- read.FCS(file.name, which.lines = lines)
y
library(flowViz)
plot(x)
plot(x,c("FL1-H", "FL2-H"))
plot(x, "FL1-H", breaks=256)
frames <- lapply(dir(system.file("extdata", "compdata", "data",
package="flowCore"), full.names=TRUE), read.FCS)
as(frames, "flowSet")
names(frames) <- sapply(frames, keyword, "SAMPLE ID")
fs <- as(frames, "flowSet")
fs
str(fs)
exprs(fs)
expr(fs)
fs@frames
fs@phenoData
fs@phenoData@data
str(frames)
head(freames)
head(frames)
phenoData(fs)
?pData
pData(phenoData(fs))
install.packages(new.packages())
?instal.packages
?install.packages
install.packages(pkgs=new.packages())
?new.packages
install.packages(pkgs=new.packages())
install.packages("~/Downloads/iFlow_2.6.0.tgz", repos = NULL)
library(iFlow)
source("http://bioconductor.org/biocLite.R")#
biocLite("iFlow")
library(iFlow)
biocLite("flowStats")
biocLite("iFlow")
library(iFlow)
install.pacages('igraph')
install.packages('igraph')
install.packages("igraph")
library(igraph)
help(package=igraph)
install.packages("igraphdata")
library(qvalue)
citation(qvalue)
citation()
install.packages("abcdeFBA")
help(pacage=abcdeFBA)
help(package=abcdeFBA)
install.packages("rjags")
install.packages("rJava")
help(package=rjags)
require(RCurl)
myCsv <- getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv2 = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
read.csv(textConnection(myCsv))
?getURL
library(RCurl)
install.packages("RCurl")
require(RCurl)
myCsv <- getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv2 = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
read.csv(textConnection(myCsv))
require(RCurl)
myCsv <- getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv2 = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
tb = read.csv(textConnection(myCsv))
tb
str(tb)
require(RCurl)
myCsv <- getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv2 = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c#gid=0")
myCsv = ("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c")
tb = read.csv(textConnection(myCsv))
head(tb)
str(tb)
require(RCurl)
myCsv = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c")
tb = read.csv(textConnection(myCsv))
require(RCurl)
myCsv = getURL("https://docs.google.com/spreadsheet/ccc?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c")
tb = read.csv(textConnection(myCsv))
str(tb)
head(tb)
str(tb)
head(tb)
require(RCurl)
myCsv = getURL("https://docs.google.com/spreadsheet/pub?key=0ArLJZixvTlU7dFRxb0lOeEE1VUZGTGVQSkdRWl94N3c&single=true&gid=0&output=csv")
tb = read.csv(textConnection(myCsv))
str(tb)
head(tb)
str(tb)
hist(tb$Age)
x = c(1:10)
x
2+2
3^2
3^5
pi
pi^2
5^3
5-2
5/2
5x3
5*3
5*5*5
log(pi)
exp(pi)
exp(0)
sqrt(pi)
sqrt(100)
100^0.5
x = 1:10;  # = means assignment, x will stay in memory
fix(x)
1:15 #no assignment, no results stay in memory
z = 1:15
fix(z)
#spelman = 100:106
spelman = 100:106
fix(spelman)
x = 3:10;
fix(x)
length(x)
fix(x)
?seq
help(seq)
?length
x
x;
y;
x
x+1
x
x = x + 1; # what happens to x?
fix(x)
plot( y ~ x );
y = x+4
#simple plot
plot( y ~ x );
plot( x ~ y )
plot( y ~ x, main="first" );
plot( y ~ x, main="first plot" );
plot( x ~ y, main="second plot" )
?plot
plot( y ~ x, main="line-point plot", type='b', pch=19 )
plot( y ~ x, main="line-point plot", type='l', pch=19 )
plot( y ~ x, main="line-point plot", type='b', pch=19 )
#this is another way of specifying an array
x = c( 0.1, 0.3, 1, 3, 5, 10, 0.001, 0.913 );
x[4:6]
x[2]
x[c(1,5,2)]
y = log(x);
plot( y ~ x );
plot( y ~ x, pch=19 );
x = 1:20
plot( x ~ x, pch=x)
x = 1:50
plot( x ~ x, pch=x)
sal <- read.table("~/Dropbox/courses.student.research.dp/bio386,2012Fall/lectures/1.R.an.overview/1/salary.dat", header=T, quote="\"")
View(sal)
head(sal)
##############################
# example of salary data
# input the data into a dataframe 'salary'
sal = read.table( "salary.dat",header=T);
# look at the first six rows of data
# You can also see the columns in this table
head(sal)
#salary is a dataframe, we can look the structure of this dataframe
str(sal)
#There 11 columns in this dataframe, we can pick individual column
# The table name should be before $ sign, and the column name should
# be after the $ sign.
sal$gender; #Gender is an array (vector) of F & M values
head(sal$gender); #this gives the first 6 values; parenthesis are for functions
sal$gender[10:15]; #This list 10th-15th values; square brakets are for vectors
sal$gender[c(11, 101, 3005, 19000)]
sal[2,3]; #List the value at the 2nd row, the 3rd column
sal[10:15, 2:4]; #list values from 10-15 rows and 2-4 columns
#how many Females and Males in this data set?
table( sal$gender );
#
hist( sal$salary);
# What is a histogram?
# Question: How long did it take to get this job after degree?
sal$interval = sal$startyr - sal$yrdeg
hist( sal$interval );
setwd("~/Dropbox/courses.student.research.dp/bio386,2012Fall/lectures/1.R.an.overview/1")
##############################
# example of salary data
setwd("~/Dropbox/courses.student.research.dp/bio386,2012Fall/lectures/1.R.an.overview/1")
# input the data into a dataframe 'salary'
sal = read.table( "salary.dat",header=T);
# look at the first six rows of data
# You can also see the columns in this table
head(sal)
#salary is a dataframe, we can look the structure of this dataframe
str(sal)
#There 11 columns in this dataframe, we can pick individual column
# The table name should be before $ sign, and the column name should
# be after the $ sign.
sal$gender; #Gender is an array (vector) of F & M values
head(sal$gender); #this gives the first 6 values; parenthesis are for functions
sal$gender[10:15]; #This list 10th-15th values; square brakets are for vectors
sal$gender[c(11, 101, 3005, 19000)]
sal[2,3]; #List the value at the 2nd row, the 3rd column
sal[10:15, 2:4]; #list values from 10-15 rows and 2-4 columns
#how many Females and Males in this data set?
table( sal$gender );
#
hist( sal$salary);
# What is a histogram?
# Question: How long did it take to get this job after degree?
sal$interval = sal$startyr - sal$yrdeg
hist( sal$interval );
# Apparently, some people started working before they have
# got their degrees.
#######################################
###Question: Is there a gender bias in salary?
#######################################
#first, we can look at a plot of salary by gender
boxplot( sal$salary ~ sal$gender );
# Partition the salary by gender
fs = sal$salary[sal$gender=='F'] #females' salary
ms = sal$salary[sal$gender=='M'] #males' salary
mean(fs)
mean(ms)
# try t-test
t.test( ms, fs )
t.test( log(ms), log(fs)); #t-test on log-transformed data
#using linear regression to examine the association
m = lm( sal$salary ~ sal$gender );
#look at the sumamry report of the regression results
summary(m);
# OR, we do this in a different way
s = sal$salary
g = sal$gender
m = lm( s ~ g );
summary(m); # R^2 = 0.01804
#What is R^2?
ss_tot = sum( (s - mean(s))^2 );
fitted_values = predict( m );
ss_reg = sum( (fitted_values - mean(fitted_values))^2 )
ss_err = sum( (salary - fitted_values)^2)
ss_reg / ss_tot; #This should the same as R^2
# work on your own, examine the effect of rank on salary
# ... ...
# ... ...
# So, rank is much better associated with salary than gender.
# Well, what's going about salary, rank, and gender?
table( sal$gender, sal$rank ); #what does this mean?
tb = table( sal$gender, sal$rank );
#this is the rank ~ gender table, the observation
#chisq.test to see whether gender -> rank
chisq.test( tb );
# what does this mean, pay attention to p-value
# Let's calcuate the chisq manually
#manual calculation of chisq test
fp = sum(tb[1,])/sum(tb) #femal fraction in the sample
mp = sum(tb[2,])/sum(tb) # male fraction in the sample
atp = sum(tb[,1])/sum(tb) #assitant fraction
asp = sum(tb[,2])/sum(tb) #associate fraction
flp = sum(tb[,3])/sum(tb) #full professor fraction
col1= sum(tb) * atp * c(fp, mp); #expectation, assistant prof
col2= sum(tb) * asp * c(fp, mp); #expectation, associate prof
col3= sum(tb) * flp * c(fp, mp); # expectation, full prof
E = matrix( c(col1, col2, col3), nrow=2) #This is the expectation
#In later sesseions, you will know tricks to do the above
# calculation more efficiently using 'apply'.
O = tb; #rename 'tb' as the Observations
c = sum( (O-E)^2/E ) #this is the chisquare value
1 - pchisq( c, df= 2); #this is the p value
#this should be the same as chisq.test
#Q, what is the difference between  t-test and chisq test?
## ... ...
# another example of chisq test
x = matrix ( c( 890, 310, 900, 300), nrow=2);
chisq.test( x )
#fisher.test ()
fisher.test(tb); #run out of memory.
#What is/are our new hypothesis or hypothyses?
# H0: salary is indepedent of rank, gender
# H1a: gender -> salary <- rank
# H1b: gender -> rank -> salary
# multiple regression
summary( lm( sal$salary ~ sal$gender + sal$rank ))
summary( lm( sal$rank   ~ sal$gender ))
# A more sophisticated way to compare the likelihood
# of each models. We discuss the likelihood methods in
# in late parts of this course.
setwd("~/Dropbox/courses.student.research.dp/bio386,2012Fall/lectures/1.R.an.overview/1")
View(sal)
sal[2,3];
sal[2:4, ] #what does do?
table( sal$gender );
hist( sal$salary);
?hist
# Question: How long did it take to get this job after degree?
sal$interval = sal$startyr - sal$yrdeg #this gives an extra colum in 'sal'
hist( sal$interval );
# Apparently, some people started working before they have
# got their degrees.
str(sal)
table(sal$field)
?table
a <- rep(c(NA, 1/0:3), 10)
table(a)
table(a, exclude=NULL)
b <- factor(rep(c("A","B","C"), 10))
table(b)
table(b, exclude="B")
d <- factor(rep(c("A","B","C"), 10), levels=c("A","B","C","D","E"))
table(d, exclude="B")
print(table(b,d), zero.print = ".")
b <- factor(rep(c("A","B","C"), 10))
table(b)
table(b, exclude="B")
d <- factor(rep(c("A","B","C"), 10), levels=c("a","b","c","d","e"))
table(d, exclude="b")
print(table(b,d), zero.print = ".")
table(a, exclude=NULL)
b <- factor(rep(c("A","B","C"), 10))
table(b)
table(b, exclude="B")
d <- factor(rep(c("a","b","c", “d”, “e”), 10), levels=c("a","b","c","d","e"))
table(d, exclude="b")
print(table(b,d), zero.print = ".")
d <- factor(rep(c("a","b","c", "d", "e"), 10), levels=c("a","b","c","d","e"))
table(d, exclude="b")
print(table(b,d), zero.print = ".")
b <- factor(rep(c("A","B","C"), 10))
table(b)
table(b, exclude="B")
d <- factor(rep(c("a","b","c", "d", "e"), 10), levels=c("a","b","c","d","e"))
table(d, exclude="b")
print(table(b,d), zero.print = ".")
d <- factor(rep(c("a","b","c", "d", "e"), 10))
table(d, exclude="b")
b <- factor(rep(c("A","B","C"), 10))
table(b)
table(b, exclude="B")
d <- factor(rep(c("a","b","c", "d", "e"), 10))
table(d, exclude="b")
table(b,d)
b
d
b <- factor(rep(c("A","B","C", "D", "E"), 10))
table(b)
table(b, exclude="B")
d <- factor(rep(c("a","b","c", "d", "e"), 10))
table(d, exclude="b")
table(b,d)
b <- factor(rep(c("A","B","C", "D", "E"), 10))
table(b)
table(b, exclude="B")
d <- factor(rep(c("a","b","c", "d", "e"), 10))
d[5] = 'e'
table(d, exclude="b")
table(b,d)
d[5]
b <- factor(rep(c("A","B","C", "D", "E"), 10))
table(b)
table(b, exclude="B")
d <- factor(rep(c("a","b","c", "d", "e"), 10))
d[5] = 'a'
table(d, exclude="b")
table(b,d)
cbind(b,d)
b <- rep(c("A","B","C", "D", "E"), 10)
table(b)
table(b, exclude="B")
d <- rep(c("a","b","c", "d", "e"), 10)
d[5] = 'a'
table(d, exclude="b")
table(b,d)
b
d
cbind(b,d)
table(b,d)
